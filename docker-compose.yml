version: '3.5'
services:
  atlas-g:
    build:
      context: './gogasm/'
    image: atlas-g
    container_name: atlas-g
    hostname: atlas-g
    expose:
      - "8081"
    networks:
        atlas:
          aliases:
            - atlas-g
    restart: on-failure
    depends_on:
        - atlas-t
    env_file: 
      - .env-atlas-g
    labels:
      - "traefik.enable=true"
      - "traefik.backend=atlas-g"
      - "traefik.frontend.rule=Host:${DOMAINNAME}"  
 #     - "traefik.frontend.rule=Host:${DOMAINNAME}; PathPrefixStrip: /${TILE}"
      - "traefik.port=8081"
      - "traefik.docker.network=atlas"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"
    
  atlas-r:
    build:
      context: './redis/'
    image: atlas-r
    container_name: atlas-r
    hostname: atlas-r
    expose:
      - "6379"
    networks:
        atlas:
          aliases:
            - atlas-r
    restart: on-failure
    env_file: 
      - .env-atlas-r
    volumes:
      - /home/${USER}/.atlas/AtlasTools/RedisDatabase/redis.conf:/usr/local/etc/redis/redis.conf
      - /home/${USER}/.atlas/data:/data

  atlas-s:
    build:
      context: './atlas/'
    image: atlas-s
    depends_on:
            - atlas-r
            - atlas-t
            - atlas-g
    container_name: atlas-s
    hostname: atlas-s
    networks:
      atlas:
        aliases:
          - atlas-s
    restart: on-failure
    ports:
      - '${ATLASQUERYPORT}:${ATLASQUERYPORT}/udp' #Query UDP
      - '${ATLASQUERYPORT}:${ATLASQUERYPORT}' #Query TCP
      - '${SEAMLESSPORT}:${SEAMLESSPORT}' #Seamless TCP
      - '${GAMEPORT1}:${GAMEPORT1}/udp' #Gameport1 UDP
      - '${GAMEPORT2}:${GAMEPORT2}/udp' #Gameport2 UDP
      - '${RCONPORT}:${RCONPORT}' #RCON Port TCP
    expose:
      - "61208"
    env_file: 
      - .env-atlas-s
    volumes:
      - "~/.atlas:/home/steam/.atlas"
    command:
      - /bin/sh
      - -c
      - |
          screen -dmS atlas -L -U /home/steam/bin/start_server.sh
          screen -dmS glances -L -U glances -w
          tail -f /dev/null
    labels:
      - "traefik.enable=true"
      - "traefik.backend=atlas-s"
    #  - "traefik.frontend.rule=Host:portainer.${DOMAINNAME}"  
      - "traefik.frontend.rule=Host:${DOMAINNAME}; PathPrefixStrip: /a1"
      - "traefik.port=61208"
      - "traefik.docker.network=atlas"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

# The reverse proxy service (Traefik)
  atlas-t:
    image: atlas-t  # The official Traefik docker image
    build:
      context: './traefik/'
    #command: --api --docker  # Enables the web UI and tells Traefik to listen to docker
    command:  --api --logLevel="DEBUG" --accessLog
    ports:
      - "80:80"      # The HTTP port
      - "443:443"    # The HTTPS Port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # So that Traefik can listen to the Docker events
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml
      - ./traefik/acme.json:/etc/traefik/acme.json
    container_name: atlas-t
    hostname: atlas-t
    env_file: .env-atlas-t
    networks:
      atlas:
        aliases:
          - atlas-t
    restart: on-failure
    domainname: ${DOMAINNAME}
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=atlas-t"
    #  - "traefik.frontend.rule=Host:admin.${DOMAINNAME}"  
      - "traefik.frontend.rule=Host:${DOMAINNAME}; PathPrefixStrip: /traefik"
      - "traefik.port=8080"
      - "traefik.docker.network=atlas"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"
      
  influxdb:
    # Full tag list: https://hub.docker.com/r/library/influxdb/tags/
    build:
      context: ./tick/influxdb/
    image: influxdb
    volumes:
      # Mount for influxdb data directory
      - ./tick/influxdb/data:/var/lib/influxdb
      # Mount for influxdb configuration
      - ./tick/influxdb/config/:/etc/influxdb/
    expose:
      # The API for InfluxDB is served on port 8086
      - "8086"
      - "8082"
      # UDP Port
      - "8089"
    container_name: influxdb
    hostname: influxdb
    #env_file: .env-atlas-t
    networks:
      atlas:
        aliases:
          - influxdb
    restart: on-failure

  kapacitor:
  # Full tag list: https://hub.docker.com/r/library/kapacitor/tags/
    build:
      context: ./tick/kapacitor/
    image: kapacitor
    container_name: kapacitor
    hostname: kapacitor
    #env_file: .env-atlas-t
    volumes:
      # Mount for kapacitor data directory
      - ./tick/kapacitor/data/:/var/lib/kapacitor
      # Mount for kapacitor configuration
      - ./tick/kapacitor/config/:/etc/kapacitor/
    # Kapacitor requires network access to Influxdb
    links:
      - influxdb
    depends_on:
      - influxdb
    expose:
      # The API for Kapacitor is served on port 9092
      - "9092"
    networks:
      atlas:
        aliases:
          - kapacitor
    restart: on-failure

  chronograf:
    # Full tag list: https://hub.docker.com/r/library/chronograf/tags/
    build:
      context: ./tick/chronograf
    image: chronograf
    container_name: chronograf
    hostname: chronograf
    environment:
      RESOURCES_PATH: "/usr/share/chronograf/resources"
    volumes:
      # Mount for chronograf database
      - ./tick/chronograf/data/:/var/lib/chronograf/
    networks:
      atlas:
        aliases:
          - chronograf
    links:
      # Chronograf requires network access to InfluxDB and Kapacitor
      - influxdb
      - kapacitor
    ports:
      # The WebUI for Chronograf is served on port 8888
      - "8888"
    depends_on:
      - kapacitor
      - influxdb
      - telegraf
    labels:
      - "traefik.enable=true"
      - "traefik.backend=chronograf"
    #  - "traefik.frontend.rule=Host:admin.${DOMAINNAME}"  
      - "traefik.frontend.rule=Host:${DOMAINNAME}; PathPrefixStrip: /tick"
      # - "traefik.frontend.redirect.regex=^(.*)/tick$$"
      # - "traefik.frontend.redirect.replacement=$$1/tick/"
      # - "traefik.frontend.rule=PathPrefix:/tick;ReplacePathRegex: ^/tick/(.*) /$$1"
      - "traefik.port=8888"
      - "traefik.docker.network=atlas"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"
      
  telegraf:
    # Full tag list: https://hub.docker.com/r/library/telegraf/tags/
    build:
      context: ./tick/telegraf/
    image: telegraf
    container_name: telegraf
    hostname: telegraf
    environment:
      HOSTNAME: ${DOMAINNAME}
    # Telegraf requires network access to InfluxDB
    links:
      - influxdb
    volumes:
      # Mount for telegraf configuration
      - ./tick/telegraf/config/:/etc/telegraf/
      # Mount for Docker API access
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - influxdb

networks:
  atlas:
    name: atlas
    driver: bridge
